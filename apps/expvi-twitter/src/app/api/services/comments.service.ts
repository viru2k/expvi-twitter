/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { f614986A52312Afe458Ea011E848C47C } from '../fn/comments/f-614986-a-52312-afe-458-ea-011-e-848-c-47-c';
import { F614986A52312Afe458Ea011E848C47C$Params } from '../fn/comments/f-614986-a-52312-afe-458-ea-011-e-848-c-47-c';
import { f96Edb08C6F7830E1850Cde4C5B920Bc } from '../fn/comments/f-96-edb-08-c-6-f-7830-e-1850-cde-4-c-5-b-920-bc';
import { F96Edb08C6F7830E1850Cde4C5B920Bc$Params } from '../fn/comments/f-96-edb-08-c-6-f-7830-e-1850-cde-4-c-5-b-920-bc';
import { User } from '../models/user';

@Injectable({ providedIn: 'root' })
export class CommentsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `f96Edb08C6F7830E1850Cde4C5B920Bc()` */
  static readonly F96Edb08C6F7830E1850Cde4C5B920BcPath = '/comments/{id}/user';

  /**
   * Get the user of a comment
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `f96Edb08C6F7830E1850Cde4C5B920Bc()` instead.
   *
   * This method doesn't expect any request body.
   */
  f96Edb08C6F7830E1850Cde4C5B920Bc$Response(params: F96Edb08C6F7830E1850Cde4C5B920Bc$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'data'?: User;
}>> {
    return f96Edb08C6F7830E1850Cde4C5B920Bc(this.http, this.rootUrl, params, context);
  }

  /**
   * Get the user of a comment
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `f96Edb08C6F7830E1850Cde4C5B920Bc$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  f96Edb08C6F7830E1850Cde4C5B920Bc(params: F96Edb08C6F7830E1850Cde4C5B920Bc$Params, context?: HttpContext): Observable<{
'data'?: User;
}> {
    return this.f96Edb08C6F7830E1850Cde4C5B920Bc$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'data'?: User;
}>): {
'data'?: User;
} => r.body)
    );
  }

  /** Path part for operation `f614986A52312Afe458Ea011E848C47C()` */
  static readonly F614986A52312Afe458Ea011E848C47CPath = '/comments/{id}';

  /**
   * Delete a comment
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `f614986A52312Afe458Ea011E848C47C()` instead.
   *
   * This method doesn't expect any request body.
   */
  f614986A52312Afe458Ea011E848C47C$Response(params: F614986A52312Afe458Ea011E848C47C$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return f614986A52312Afe458Ea011E848C47C(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete a comment
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `f614986A52312Afe458Ea011E848C47C$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  f614986A52312Afe458Ea011E848C47C(params: F614986A52312Afe458Ea011E848C47C$Params, context?: HttpContext): Observable<void> {
    return this.f614986A52312Afe458Ea011E848C47C$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
