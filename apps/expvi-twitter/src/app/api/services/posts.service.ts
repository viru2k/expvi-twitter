/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { 1B6008A78E66Ebbbb7A959Cf4B614C5E } from '../fn/posts/1-b-6008-a-78-e-66-ebbbb-7-a-959-cf-4-b-614-c-5-e';
import { 1B6008A78E66Ebbbb7A959Cf4B614C5E$Params } from '../fn/posts/1-b-6008-a-78-e-66-ebbbb-7-a-959-cf-4-b-614-c-5-e';
import { 383098504Fbc54F89F2165Fe512Da03C } from '../fn/posts/383098504-fbc-54-f-89-f-2165-fe-512-da-03-c';
import { 383098504Fbc54F89F2165Fe512Da03C$Params } from '../fn/posts/383098504-fbc-54-f-89-f-2165-fe-512-da-03-c';
import { 448633Fd8A928Fd1508D9E6Ee74322C7 } from '../fn/posts/448633-fd-8-a-928-fd-1508-d-9-e-6-ee-74322-c-7';
import { 448633Fd8A928Fd1508D9E6Ee74322C7$Params } from '../fn/posts/448633-fd-8-a-928-fd-1508-d-9-e-6-ee-74322-c-7';
import { 6B9Af649206Ee145Dfc5584522C37327 } from '../fn/posts/6-b-9-af-649206-ee-145-dfc-5584522-c-37327';
import { 6B9Af649206Ee145Dfc5584522C37327$Params } from '../fn/posts/6-b-9-af-649206-ee-145-dfc-5584522-c-37327';
import { 6F8F9A3757A021F020B31F8Bd153C021 } from '../fn/posts/6-f-8-f-9-a-3757-a-021-f-020-b-31-f-8-bd-153-c-021';
import { 6F8F9A3757A021F020B31F8Bd153C021$Params } from '../fn/posts/6-f-8-f-9-a-3757-a-021-f-020-b-31-f-8-bd-153-c-021';
import { b43C615B6698B2F011A40A722089Ad16 } from '../fn/posts/b-43-c-615-b-6698-b-2-f-011-a-40-a-722089-ad-16';
import { B43C615B6698B2F011A40A722089Ad16$Params } from '../fn/posts/b-43-c-615-b-6698-b-2-f-011-a-40-a-722089-ad-16';
import { bd0379A97B4057F7D5A720A565E8Bf19 } from '../fn/posts/bd-0379-a-97-b-4057-f-7-d-5-a-720-a-565-e-8-bf-19';
import { Bd0379A97B4057F7D5A720A565E8Bf19$Params } from '../fn/posts/bd-0379-a-97-b-4057-f-7-d-5-a-720-a-565-e-8-bf-19';
import { ccc642D639Ab35E23161Fa8D2F37A9A3 } from '../fn/posts/ccc-642-d-639-ab-35-e-23161-fa-8-d-2-f-37-a-9-a-3';
import { Ccc642D639Ab35E23161Fa8D2F37A9A3$Params } from '../fn/posts/ccc-642-d-639-ab-35-e-23161-fa-8-d-2-f-37-a-9-a-3';
import { cce7863441436Fd49Dc474491F658292 } from '../fn/posts/cce-7863441436-fd-49-dc-474491-f-658292';
import { Cce7863441436Fd49Dc474491F658292$Params } from '../fn/posts/cce-7863441436-fd-49-dc-474491-f-658292';
import { cda18Be578Faea3F1B769E487A5F9A92 } from '../fn/posts/cda-18-be-578-faea-3-f-1-b-769-e-487-a-5-f-9-a-92';
import { Cda18Be578Faea3F1B769E487A5F9A92$Params } from '../fn/posts/cda-18-be-578-faea-3-f-1-b-769-e-487-a-5-f-9-a-92';
import { Comment } from '../models/comment';
import { fae30Daa3987C576D9Dd4709119D26Da } from '../fn/posts/fae-30-daa-3987-c-576-d-9-dd-4709119-d-26-da';
import { Fae30Daa3987C576D9Dd4709119D26Da$Params } from '../fn/posts/fae-30-daa-3987-c-576-d-9-dd-4709119-d-26-da';
import { Post } from '../models/post';
import { User } from '../models/user';

@Injectable({ providedIn: 'root' })
export class PostsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `cce7863441436Fd49Dc474491F658292()` */
  static readonly Cce7863441436Fd49Dc474491F658292Path = '/posts';

  /**
   * List all posts in pages of 12 items
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `cce7863441436Fd49Dc474491F658292()` instead.
   *
   * This method doesn't expect any request body.
   */
  cce7863441436Fd49Dc474491F658292$Response(params?: Cce7863441436Fd49Dc474491F658292$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'data'?: Array<Post>;

/**
 * The URL to the current page
 */
'path'?: string;

/**
 * The cursor for the next page
 */
'next_cursor'?: string;

/**
 * The URL to the next page.
 */
'next_page_url'?: string;

/**
 * The cursor for the previous page
 */
'prev_cursor'?: string;

/**
 * The URL to the previous page
 */
'prev_page_url'?: string;
}>> {
    return cce7863441436Fd49Dc474491F658292(this.http, this.rootUrl, params, context);
  }

  /**
   * List all posts in pages of 12 items
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `cce7863441436Fd49Dc474491F658292$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  cce7863441436Fd49Dc474491F658292(params?: Cce7863441436Fd49Dc474491F658292$Params, context?: HttpContext): Observable<{
'data'?: Array<Post>;

/**
 * The URL to the current page
 */
'path'?: string;

/**
 * The cursor for the next page
 */
'next_cursor'?: string;

/**
 * The URL to the next page.
 */
'next_page_url'?: string;

/**
 * The cursor for the previous page
 */
'prev_cursor'?: string;

/**
 * The URL to the previous page
 */
'prev_page_url'?: string;
}> {
    return this.cce7863441436Fd49Dc474491F658292$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'data'?: Array<Post>;

/**
 * The URL to the current page
 */
'path'?: string;

/**
 * The cursor for the next page
 */
'next_cursor'?: string;

/**
 * The URL to the next page.
 */
'next_page_url'?: string;

/**
 * The cursor for the previous page
 */
'prev_cursor'?: string;

/**
 * The URL to the previous page
 */
'prev_page_url'?: string;
}>): {
'data'?: Array<Post>;

/**
 * The URL to the current page
 */
'path'?: string;

/**
 * The cursor for the next page
 */
'next_cursor'?: string;

/**
 * The URL to the next page.
 */
'next_page_url'?: string;

/**
 * The cursor for the previous page
 */
'prev_cursor'?: string;

/**
 * The URL to the previous page
 */
'prev_page_url'?: string;
} => r.body)
    );
  }

  /** Path part for operation `ccc642D639Ab35E23161Fa8D2F37A9A3()` */
  static readonly Ccc642D639Ab35E23161Fa8D2F37A9A3Path = '/posts';

  /**
   * Create a new post
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `ccc642D639Ab35E23161Fa8D2F37A9A3()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ccc642D639Ab35E23161Fa8D2F37A9A3$Response(params?: Ccc642D639Ab35E23161Fa8D2F37A9A3$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'data'?: Post;
}>> {
    return ccc642D639Ab35E23161Fa8D2F37A9A3(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new post
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `ccc642D639Ab35E23161Fa8D2F37A9A3$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  ccc642D639Ab35E23161Fa8D2F37A9A3(params?: Ccc642D639Ab35E23161Fa8D2F37A9A3$Params, context?: HttpContext): Observable<{
'data'?: Post;
}> {
    return this.ccc642D639Ab35E23161Fa8D2F37A9A3$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'data'?: Post;
}>): {
'data'?: Post;
} => r.body)
    );
  }

  /** Path part for operation `383098504Fbc54F89F2165Fe512Da03C()` */
  static readonly 383098504Fbc54F89F2165Fe512Da03CPath = '/posts/poll';

  /**
   * Check for new posts
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `383098504Fbc54F89F2165Fe512Da03C()` instead.
   *
   * This method doesn't expect any request body.
   */
  383098504Fbc54F89F2165Fe512Da03C$Response(params: 383098504Fbc54F89F2165Fe512Da03C$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'data'?: Array<Post>;
}>> {
    return 383098504Fbc54F89F2165Fe512Da03C(this.http, this.rootUrl, params, context);
  }

  /**
   * Check for new posts
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `383098504Fbc54F89F2165Fe512Da03C$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  383098504Fbc54F89F2165Fe512Da03C(params: 383098504Fbc54F89F2165Fe512Da03C$Params, context?: HttpContext): Observable<{
'data'?: Array<Post>;
}> {
    return this.383098504Fbc54F89F2165Fe512Da03C$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'data'?: Array<Post>;
}>): {
'data'?: Array<Post>;
} => r.body)
    );
  }

  /** Path part for operation `6B9Af649206Ee145Dfc5584522C37327()` */
  static readonly 6B9Af649206Ee145Dfc5584522C37327Path = '/posts/{id}';

  /**
   * Get a post
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `6B9Af649206Ee145Dfc5584522C37327()` instead.
   *
   * This method doesn't expect any request body.
   */
  6B9Af649206Ee145Dfc5584522C37327$Response(params: 6B9Af649206Ee145Dfc5584522C37327$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'data'?: Post;
}>> {
    return 6B9Af649206Ee145Dfc5584522C37327(this.http, this.rootUrl, params, context);
  }

  /**
   * Get a post
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `6B9Af649206Ee145Dfc5584522C37327$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  6B9Af649206Ee145Dfc5584522C37327(params: 6B9Af649206Ee145Dfc5584522C37327$Params, context?: HttpContext): Observable<{
'data'?: Post;
}> {
    return this.6B9Af649206Ee145Dfc5584522C37327$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'data'?: Post;
}>): {
'data'?: Post;
} => r.body)
    );
  }

  /** Path part for operation `6F8F9A3757A021F020B31F8Bd153C021()` */
  static readonly 6F8F9A3757A021F020B31F8Bd153C021Path = '/posts/{id}';

  /**
   * Delete a post
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `6F8F9A3757A021F020B31F8Bd153C021()` instead.
   *
   * This method doesn't expect any request body.
   */
  6F8F9A3757A021F020B31F8Bd153C021$Response(params: 6F8F9A3757A021F020B31F8Bd153C021$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return 6F8F9A3757A021F020B31F8Bd153C021(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete a post
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `6F8F9A3757A021F020B31F8Bd153C021$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  6F8F9A3757A021F020B31F8Bd153C021(params: 6F8F9A3757A021F020B31F8Bd153C021$Params, context?: HttpContext): Observable<void> {
    return this.6F8F9A3757A021F020B31F8Bd153C021$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `1B6008A78E66Ebbbb7A959Cf4B614C5E()` */
  static readonly 1B6008A78E66Ebbbb7A959Cf4B614C5EPath = '/posts/{id}/user';

  /**
   * Get the user of a post
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `1B6008A78E66Ebbbb7A959Cf4B614C5E()` instead.
   *
   * This method doesn't expect any request body.
   */
  1B6008A78E66Ebbbb7A959Cf4B614C5E$Response(params: 1B6008A78E66Ebbbb7A959Cf4B614C5E$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'data'?: User;
}>> {
    return 1B6008A78E66Ebbbb7A959Cf4B614C5E(this.http, this.rootUrl, params, context);
  }

  /**
   * Get the user of a post
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `1B6008A78E66Ebbbb7A959Cf4B614C5E$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  1B6008A78E66Ebbbb7A959Cf4B614C5E(params: 1B6008A78E66Ebbbb7A959Cf4B614C5E$Params, context?: HttpContext): Observable<{
'data'?: User;
}> {
    return this.1B6008A78E66Ebbbb7A959Cf4B614C5E$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'data'?: User;
}>): {
'data'?: User;
} => r.body)
    );
  }

  /** Path part for operation `b43C615B6698B2F011A40A722089Ad16()` */
  static readonly B43C615B6698B2F011A40A722089Ad16Path = '/posts/{id}/likes';

  /**
   * Get the users who liked the post
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `b43C615B6698B2F011A40A722089Ad16()` instead.
   *
   * This method doesn't expect any request body.
   */
  b43C615B6698B2F011A40A722089Ad16$Response(params: B43C615B6698B2F011A40A722089Ad16$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'data'?: Array<User>;
}>> {
    return b43C615B6698B2F011A40A722089Ad16(this.http, this.rootUrl, params, context);
  }

  /**
   * Get the users who liked the post
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `b43C615B6698B2F011A40A722089Ad16$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  b43C615B6698B2F011A40A722089Ad16(params: B43C615B6698B2F011A40A722089Ad16$Params, context?: HttpContext): Observable<{
'data'?: Array<User>;
}> {
    return this.b43C615B6698B2F011A40A722089Ad16$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'data'?: Array<User>;
}>): {
'data'?: Array<User>;
} => r.body)
    );
  }

  /** Path part for operation `cda18Be578Faea3F1B769E487A5F9A92()` */
  static readonly Cda18Be578Faea3F1B769E487A5F9A92Path = '/posts/{id}/likes';

  /**
   * Like the post
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `cda18Be578Faea3F1B769E487A5F9A92()` instead.
   *
   * This method doesn't expect any request body.
   */
  cda18Be578Faea3F1B769E487A5F9A92$Response(params: Cda18Be578Faea3F1B769E487A5F9A92$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return cda18Be578Faea3F1B769E487A5F9A92(this.http, this.rootUrl, params, context);
  }

  /**
   * Like the post
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `cda18Be578Faea3F1B769E487A5F9A92$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  cda18Be578Faea3F1B769E487A5F9A92(params: Cda18Be578Faea3F1B769E487A5F9A92$Params, context?: HttpContext): Observable<void> {
    return this.cda18Be578Faea3F1B769E487A5F9A92$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `448633Fd8A928Fd1508D9E6Ee74322C7()` */
  static readonly 448633Fd8A928Fd1508D9E6Ee74322C7Path = '/posts/{id}/likes';

  /**
   * Remove the like on the post
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `448633Fd8A928Fd1508D9E6Ee74322C7()` instead.
   *
   * This method doesn't expect any request body.
   */
  448633Fd8A928Fd1508D9E6Ee74322C7$Response(params: 448633Fd8A928Fd1508D9E6Ee74322C7$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return 448633Fd8A928Fd1508D9E6Ee74322C7(this.http, this.rootUrl, params, context);
  }

  /**
   * Remove the like on the post
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `448633Fd8A928Fd1508D9E6Ee74322C7$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  448633Fd8A928Fd1508D9E6Ee74322C7(params: 448633Fd8A928Fd1508D9E6Ee74322C7$Params, context?: HttpContext): Observable<void> {
    return this.448633Fd8A928Fd1508D9E6Ee74322C7$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `bd0379A97B4057F7D5A720A565E8Bf19()` */
  static readonly Bd0379A97B4057F7D5A720A565E8Bf19Path = '/posts/{id}/comments';

  /**
   * Get the comments for the post
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `bd0379A97B4057F7D5A720A565E8Bf19()` instead.
   *
   * This method doesn't expect any request body.
   */
  bd0379A97B4057F7D5A720A565E8Bf19$Response(params: Bd0379A97B4057F7D5A720A565E8Bf19$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'data'?: Array<Comment>;
}>> {
    return bd0379A97B4057F7D5A720A565E8Bf19(this.http, this.rootUrl, params, context);
  }

  /**
   * Get the comments for the post
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `bd0379A97B4057F7D5A720A565E8Bf19$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  bd0379A97B4057F7D5A720A565E8Bf19(params: Bd0379A97B4057F7D5A720A565E8Bf19$Params, context?: HttpContext): Observable<{
'data'?: Array<Comment>;
}> {
    return this.bd0379A97B4057F7D5A720A565E8Bf19$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'data'?: Array<Comment>;
}>): {
'data'?: Array<Comment>;
} => r.body)
    );
  }

  /** Path part for operation `fae30Daa3987C576D9Dd4709119D26Da()` */
  static readonly Fae30Daa3987C576D9Dd4709119D26DaPath = '/posts/{id}/comments';

  /**
   * Create a new comment for the post
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `fae30Daa3987C576D9Dd4709119D26Da()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  fae30Daa3987C576D9Dd4709119D26Da$Response(params: Fae30Daa3987C576D9Dd4709119D26Da$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'data'?: Comment;
}>> {
    return fae30Daa3987C576D9Dd4709119D26Da(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new comment for the post
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `fae30Daa3987C576D9Dd4709119D26Da$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  fae30Daa3987C576D9Dd4709119D26Da(params: Fae30Daa3987C576D9Dd4709119D26Da$Params, context?: HttpContext): Observable<{
'data'?: Comment;
}> {
    return this.fae30Daa3987C576D9Dd4709119D26Da$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'data'?: Comment;
}>): {
'data'?: Comment;
} => r.body)
    );
  }

}
