/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { 6946Bbab7898F59A09E3C8E529A38907 } from '../fn/users/6946-bbab-7898-f-59-a-09-e-3-c-8-e-529-a-38907';
import { 6946Bbab7898F59A09E3C8E529A38907$Params } from '../fn/users/6946-bbab-7898-f-59-a-09-e-3-c-8-e-529-a-38907';
import { 86818D33Ca62De84348B16E4653636F7 } from '../fn/users/86818-d-33-ca-62-de-84348-b-16-e-4653636-f-7';
import { 86818D33Ca62De84348B16E4653636F7$Params } from '../fn/users/86818-d-33-ca-62-de-84348-b-16-e-4653636-f-7';
import { 8A014C3Fe66929Fe2510886732473Cec } from '../fn/users/8-a-014-c-3-fe-66929-fe-2510886732473-cec';
import { 8A014C3Fe66929Fe2510886732473Cec$Params } from '../fn/users/8-a-014-c-3-fe-66929-fe-2510886732473-cec';
import { Comment } from '../models/comment';
import { d1B8Dfdbeb145Eb22Cdcc439D2A6E469 } from '../fn/users/d-1-b-8-dfdbeb-145-eb-22-cdcc-439-d-2-a-6-e-469';
import { D1B8Dfdbeb145Eb22Cdcc439D2A6E469$Params } from '../fn/users/d-1-b-8-dfdbeb-145-eb-22-cdcc-439-d-2-a-6-e-469';
import { Post } from '../models/post';
import { User } from '../models/user';

@Injectable({ providedIn: 'root' })
export class UsersService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `6946Bbab7898F59A09E3C8E529A38907()` */
  static readonly 6946Bbab7898F59A09E3C8E529A38907Path = '/users/{id}';

  /**
   * Get a user
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `6946Bbab7898F59A09E3C8E529A38907()` instead.
   *
   * This method doesn't expect any request body.
   */
  6946Bbab7898F59A09E3C8E529A38907$Response(params: 6946Bbab7898F59A09E3C8E529A38907$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'data'?: User;
}>> {
    return 6946Bbab7898F59A09E3C8E529A38907(this.http, this.rootUrl, params, context);
  }

  /**
   * Get a user
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `6946Bbab7898F59A09E3C8E529A38907$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  6946Bbab7898F59A09E3C8E529A38907(params: 6946Bbab7898F59A09E3C8E529A38907$Params, context?: HttpContext): Observable<{
'data'?: User;
}> {
    return this.6946Bbab7898F59A09E3C8E529A38907$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'data'?: User;
}>): {
'data'?: User;
} => r.body)
    );
  }

  /** Path part for operation `86818D33Ca62De84348B16E4653636F7()` */
  static readonly 86818D33Ca62De84348B16E4653636F7Path = '/users/{id}/posts';

  /**
   * Get a user's posts
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `86818D33Ca62De84348B16E4653636F7()` instead.
   *
   * This method doesn't expect any request body.
   */
  86818D33Ca62De84348B16E4653636F7$Response(params: 86818D33Ca62De84348B16E4653636F7$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'data'?: Array<Post>;
}>> {
    return 86818D33Ca62De84348B16E4653636F7(this.http, this.rootUrl, params, context);
  }

  /**
   * Get a user's posts
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `86818D33Ca62De84348B16E4653636F7$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  86818D33Ca62De84348B16E4653636F7(params: 86818D33Ca62De84348B16E4653636F7$Params, context?: HttpContext): Observable<{
'data'?: Array<Post>;
}> {
    return this.86818D33Ca62De84348B16E4653636F7$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'data'?: Array<Post>;
}>): {
'data'?: Array<Post>;
} => r.body)
    );
  }

  /** Path part for operation `8A014C3Fe66929Fe2510886732473Cec()` */
  static readonly 8A014C3Fe66929Fe2510886732473CecPath = '/users/{id}/likes';

  /**
   * Get a user's liked posts
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `8A014C3Fe66929Fe2510886732473Cec()` instead.
   *
   * This method doesn't expect any request body.
   */
  8A014C3Fe66929Fe2510886732473Cec$Response(params: 8A014C3Fe66929Fe2510886732473Cec$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'data'?: Array<Post>;
}>> {
    return 8A014C3Fe66929Fe2510886732473Cec(this.http, this.rootUrl, params, context);
  }

  /**
   * Get a user's liked posts
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `8A014C3Fe66929Fe2510886732473Cec$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  8A014C3Fe66929Fe2510886732473Cec(params: 8A014C3Fe66929Fe2510886732473Cec$Params, context?: HttpContext): Observable<{
'data'?: Array<Post>;
}> {
    return this.8A014C3Fe66929Fe2510886732473Cec$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'data'?: Array<Post>;
}>): {
'data'?: Array<Post>;
} => r.body)
    );
  }

  /** Path part for operation `d1B8Dfdbeb145Eb22Cdcc439D2A6E469()` */
  static readonly D1B8Dfdbeb145Eb22Cdcc439D2A6E469Path = '/users/{id}/comments';

  /**
   * Get a user's comments
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `d1B8Dfdbeb145Eb22Cdcc439D2A6E469()` instead.
   *
   * This method doesn't expect any request body.
   */
  d1B8Dfdbeb145Eb22Cdcc439D2A6E469$Response(params: D1B8Dfdbeb145Eb22Cdcc439D2A6E469$Params, context?: HttpContext): Observable<StrictHttpResponse<{
'data'?: Array<Comment>;
}>> {
    return d1B8Dfdbeb145Eb22Cdcc439D2A6E469(this.http, this.rootUrl, params, context);
  }

  /**
   * Get a user's comments
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `d1B8Dfdbeb145Eb22Cdcc439D2A6E469$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  d1B8Dfdbeb145Eb22Cdcc439D2A6E469(params: D1B8Dfdbeb145Eb22Cdcc439D2A6E469$Params, context?: HttpContext): Observable<{
'data'?: Array<Comment>;
}> {
    return this.d1B8Dfdbeb145Eb22Cdcc439D2A6E469$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
'data'?: Array<Comment>;
}>): {
'data'?: Array<Comment>;
} => r.body)
    );
  }

}
